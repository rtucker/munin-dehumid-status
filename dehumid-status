#!/usr/bin/python -W ignore
# -*- coding: utf-8 -*-

# A munin plugin for visualizing the status of Twitter-enabled dehumidifiers.

# Name as follows:
# /etc/munin/plugins/dehumid_<dehumidifiername>
# where <dehumidifiername> is the name of the dehumidifier.

# Currently supports:
#   mwwdehumid http://github.com/mwalling/arduino-twitdehumid/tree

# Returns 0 for an empty dehumidifier, 100 for a full dehumidifier.
# In the future, may return a percentage, if anyone ever goes insane and
# does that.  (e.g. 0.5 would be half-full)

# Ryan Tucker <rtucker@gmail.com> 2009/06/25

import os
import re
import serial
import sys
import twitter

# Full and empty regexps for various dehumidifiers
dehumidifiers = {'mwwdehumid':
                    {'type': 'twitter',
                     'full': 'My tank is full.*',
                     'empty': 'Thanks for emptying me.*'},
                 'hoopydehumid':
                    {'type': 'capacitance',
                     'description': 'HoopyCasa Basement Dehumidifier',
                     'serial': serial.Serial('/dev/ttyUSB0', 9600),
                     'fullcapacitance': 50e-9,
                     'emptycapacitance': 5e-9}
                }

myname = os.path.split(sys.argv[0])[-1].split('_')[1]

class _FixedFileCache(twitter._FileCache):
    # Patch twitter._FileCache._GetUsername to include a try/except, to
    # rectify http://github.com/rtucker/munin-dehumid-status/issues#issue/1
    def _GetUsername(self):
        '''Attempt to find the username in a cross-platform fashion.'''
        try:
            return os.getenv('USER') or \
                   os.getenv('LOGNAME') or \
                   os.getenv('USERNAME') or \
                   os.getlogin() or \
                   'nobody'
        except (IOError, OSError), e:
            return 'nobody'

twitter._FileCache = _FixedFileCache

def print_config(name):
	# outputs the configuration for a given instance
    if dehumidifiers[name]['type'] == 'twitter':
        api = twitter.Api()
        user = api.GetUser(name)
        id = user.name + ' (via Twitter)'
    elif dehumidifiers[name]['type'] == 'capacitance':
        id = dehumidifiers[name]['description'] + ' (via Arduino)'
	print """graph_title Status for %s
graph_args --base 1000 --lower-limit 0
graph_vlabel Fullness (percent)
graph_category Climate
graph_info Fullness of the dehumidifier
%s.label Percent full
%s.draw AREA""" % (id, name, name)

def get_fullness_via_twitter(name):
    api = twitter.Api()
    user = api.GetUser(name)
    # returns the percent full from twitter
    text = user.status.text
    # Is it full?
    rg = re.compile(dehumidifiers[name]['full'])
    if rg.match(text):
        return 100
    # Is it empty?
    rg = re.compile(dehumidifiers[name]['empty'])
    if rg.match(text):
        return 0
    # Is it... indeterminent?
    return 50

def get_fullness_via_capacitance(name):
    ser = dehumidifiers[name]['serial']
    ser.flush()
    results = []
    for test in range(0,11):
        (time, timeunit, cap, capunit) = ser.readline().split()
        if capunit == 'microFarads':
            results.append(int(cap) * 1e-6)
        elif capunit == 'nanoFarads':
            results.append(int(cap) * 1e-9)
    capacitance = sorted(results)[int(len(results)/2)]

    if capacitance < dehumidifiers[name]['emptycapacitance']:
        return 0
    elif capacitance > dehumidifiers[name]['fullcapacitance']:
        return 100
    else:
        capmax = dehumidifiers[name]['fullcapacitance'] - dehumidifiers[name]['emptycapacitance']
        capcur = capacitance - dehumidifiers[name]['emptycapacitance']
        cappct = (capcur / capmax) * 100
        return int(cappct)

def main():
    if len(sys.argv) > 1 and sys.argv[1] == 'config':
        print_config(myname)
    else:
        if dehumidifiers[myname]['type'] == 'twitter':
            fullness = get_fullness_via_twitter(myname)
        elif dehumidifiers[myname]['type'] == 'capacitance':
            fullness = get_fullness_via_capacitance(myname)
        print '%s.value %i' % (myname, fullness)

if __name__ == '__main__':
	main()

